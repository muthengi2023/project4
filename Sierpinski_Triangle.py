#Maureen Muthengi
#Section 4
#Fall 2023
# A simple example using Tkinter to draw a Sierpinski Triangle with many triangles inside.
# The Sierpinski Triangle is a fractal that can be recursively generated by dividing an equilateral triangle into smaller equilateral triangles.
import tkinter as tk

def midpoint(point1, point2):
    return ((point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2)

def draw_triangle(canvas, p1, p2, p3, depth):
    if depth == 0:
        canvas.create_polygon(p1, p2, p3, fill='black', outline='black')
    else:
        # Calculate midpoints of edges
        mid1 = midpoint(p1, p2)
        mid2 = midpoint(p2, p3)
        mid3 = midpoint(p3, p1)

        # Recursively draw three smaller triangles
        draw_triangle(canvas, p1, mid1, mid3, depth - 1)
        draw_triangle(canvas, mid1, p2, mid2, depth - 1)
        draw_triangle(canvas, mid3, mid2, p3, depth - 1)

def draw_sierpinski_triangle(canvas, side_length, depth):
    # Adjust the order of points to avoid upside down
    p1 = (0, side_length * (3**0.5) / 2)
    p2 = (side_length, side_length * (3**0.5) / 2)
    p3 = (side_length / 2, 0)

    draw_triangle(canvas, p1, p2, p3, depth)

def main():
    root = tk.Tk()
    root.title("Sierpinski Triangle")

    canvas = tk.Canvas(root, width=600, height=600, bg='white')
    canvas.pack()

    side_length = 500
    depth = 4
    draw_sierpinski_triangle(canvas, side_length, depth)

    root.mainloop()

if __name__ == "__main__":
    main()
